/*
 * TPVV
 *
 * TPVV Ingeniería Web
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lac56@alu.ua.es
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using MySql.Data.MySqlClient;
using System.Data.SqlClient;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using static IO.Swagger.Models.Pagos;
using System.Runtime.Serialization;
using System.Linq;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PagosApiController : ControllerBase
    {
        private MySqlConnection conn;
        private bool comprobarToken(string token)
        {
            MySqlCommand cmd2 = new MySqlCommand();
            cmd2.Connection = conn;
            cmd2.CommandText = "SELECT * FROM iw.almacentokens where token = '" + token + "'";
            cmd2.ExecuteNonQuery();
            MySqlDataReader readerKey = cmd2.ExecuteReader();
            bool comprobarKey = false;

            while (readerKey.Read())
            {
                if (token == readerKey.GetString(1))
                {
                    comprobarKey = true;
                    break;
                }
            }

            return comprobarKey;
        }
        private string devolverIDUSER(string token)
        {
            string id="";
            MySqlCommand cmd2 = new MySqlCommand();
            cmd2.Connection = conn;
            cmd2.CommandText = "SELECT id FROM iw.usuarios where token = '" + token + "'";
            cmd2.ExecuteNonQuery();
            MySqlDataReader readerKey = cmd2.ExecuteReader();
            if (readerKey.Read())
            {
                id = readerKey.GetString(0);
            }
            return id;
        }
        private bool isAdmin(string token)
        {
            bool admin = false;
            string tipo = "";
            MySqlCommand cmd2 = new MySqlCommand();
            cmd2.Connection = conn;
            cmd2.CommandText = "SELECT tipoUsuario FROM iw.usuarios where token = '" + token + "'";
            cmd2.ExecuteNonQuery();
            MySqlDataReader readerKey = cmd2.ExecuteReader();
            if (readerKey.Read())
            {
                tipo = readerKey.GetString(0);
                if (tipo.Equals("admin"))
                {
                    admin = true;
                }
            }
            return admin;
        }
        private string GetValue(EstadoEnum? paymentStatus)
        {
            EnumMemberAttribute attribute = paymentStatus
                .GetType()
                .GetField(paymentStatus.ToString())
                .GetCustomAttributes(typeof(EnumMemberAttribute), false)
                .SingleOrDefault() as EnumMemberAttribute;

            return attribute?.Value;
        }
        /// <summary>
        /// Obtiene todos los detalles de una transacción en específico
        /// </summary>
        /// <remarks>Lo que haremos será consultar un pago en concreto. Podremos ver todos los campos que hemos introducido para la transacción así como el estado en el que se encuentra la misma</remarks>
        /// <param name="token"></param>
        /// <param name="idPago"></param>
        /// <response code="200">Detalles sobre la transaccion</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        /// <response code="404">No se encontró el recurso que se pidió</response>
        [HttpGet]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/detallesPago")]
        [ValidateModelState]
        [SwaggerOperation("GetDetallesPago")]
        [SwaggerResponse(statusCode: 200, type: typeof(Pagos), description: "Detalles sobre la transaccion")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se encontró el recurso que se pidió")]
        public virtual IActionResult GetDetallesPago([FromQuery][Required()]string token, [FromQuery][Required()]int? idPago)
        {
            string stringConexion = "server=localhost;port=3306;user id=root;password=adelfr.2000;database=iw;SslMode=none";
            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            InlineResponse200 resp = new InlineResponse200();

            if (comprobarToken(token))
            {
                conn.Close();
                conn = new MySqlConnection(stringConexion);
                conn.Open();
                bool isadmin = isAdmin(token);
                conn.Close();
                conn = new MySqlConnection(stringConexion);
                conn.Open();
                string id = devolverIDUSER(token);
                conn.Close();
                conn = new MySqlConnection(stringConexion);
                conn.Open();
                MySqlCommand cmd2 = new MySqlCommand();
                cmd2.Connection = conn;
                if (isadmin)
                {
                    cmd2.CommandText = "SELECT p.id,p.total,p.concepto,p.referencia,p.fecha,p.estado,p.detallesEstado,u.email FROM iw.pagos p,iw.usuarios u where p.fk_user=u.id and p.id = " + idPago.ToString() + "";
                }
                else
                {
                    cmd2.CommandText = "SELECT p.id,p.total,p.concepto,p.referencia,p.fecha,p.estado,p.detallesEstado,u.email FROM iw.pagos p,iw.usuarios u where p.fk_user=u.id and p.id = " + idPago.ToString() + " and p.fk_user='"+id+"'";
                }
                cmd2.ExecuteNonQuery();

                Pagos pagoItem = new Pagos();
                MySqlDataReader reader = cmd2.ExecuteReader();

                while (reader.Read())
                {
                    pagoItem = new Pagos();
                    pagoItem.Id = Convert.ToInt32(reader.GetString(0));
                    pagoItem.Total = Convert.ToDecimal(reader.GetString(1));
                    pagoItem.Concepto = reader.GetString(2);
                    pagoItem.Referencia = reader.GetString(3);
                    pagoItem.Fecha = reader.GetString(4);
                    if (reader.GetString(5).Equals("EN_ESPERA"))
                    {
                        pagoItem.Estado = Pagos.EstadoEnum.ENESPERAEnum;
                    }
                    else
                    {
                        if (reader.GetString(5).Equals("ACEPTADO"))
                        {
                            pagoItem.Estado = Pagos.EstadoEnum.ACEPTADOEnum;
                        }
                        else
                        {
                            pagoItem.Estado = Pagos.EstadoEnum.DENEGADODEVOLUCINEnum;
                        }
                    }
                    pagoItem.DetallesEstado = reader.GetString(6);
                    pagoItem.UsuarioEmail = reader.GetString(7);
                    conn.Close();
                    return StatusCode(200, pagoItem);
                }

                InlineResponse404 resp3 = new InlineResponse404();
                resp3.ErrorMessage = "ERROR_RECURSO_NO_ENCONTRADO";
                conn.Close();
                return StatusCode(404, resp3);
            }
            else
            {
                InlineResponse401 resp2 = new InlineResponse401();
                resp2.ErrorMessage = "ERROR_TOKEN";
                conn.Close();
                return StatusCode(401, resp2);
            }

            return StatusCode(200, resp);
        }

        /// <summary>
        /// Se devuelven todos los pagos realizados por ese usuario
        /// </summary>
        /// <remarks>Lo que hacemos es mediante el token verificar que usuario es el que esta haciendo la peticion y entonces listar todos los pagos que ha realizado a través de nuestra aplicación.</remarks>
        /// <param name="token"></param>
        /// <response code="200">Lista de los pagos del usuario</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        [HttpGet]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/listaPagos")]
        [ValidateModelState]
        [SwaggerOperation("ListaPagos")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "Lista de los pagos del usuario")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        public virtual IActionResult ListaPagos([FromQuery][Required()]string token)
        {
            string stringConexion = "server=localhost;port=3306;user id=root;password=adelfr.2000;database=iw;SslMode=none";
            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            InlineResponse200 resp = new InlineResponse200();

            if (comprobarToken(token))
            {
                conn.Close();
                conn = new MySqlConnection(stringConexion);
                conn.Open();
                bool isadmin = isAdmin(token);
                conn.Close();
                conn = new MySqlConnection(stringConexion);
                conn.Open();
                string id = devolverIDUSER(token);
                conn.Close();
                conn = new MySqlConnection(stringConexion);
                conn.Open();
                MySqlCommand cmd2 = new MySqlCommand();
                cmd2.Connection = conn;
                if (isadmin)
                {
                    cmd2.CommandText = "SELECT p.id,p.total,p.concepto,p.referencia,p.fecha,p.estado,p.detallesEstado,u.email FROM iw.pagos p,iw.usuarios u where p.fk_user=u.id";
                }
                else
                {
                    cmd2.CommandText = "SELECT p.id,p.total,p.concepto,p.referencia,p.fecha,p.estado,p.detallesEstado,u.email FROM iw.pagos p,iw.usuarios u where p.fk_user=u.id and fk_user='" + id+"'";
                }
                cmd2.ExecuteNonQuery();

                Pagos pagoItem = new Pagos();
                MySqlDataReader reader = cmd2.ExecuteReader();
                List<Pagos> listaPagos = new List<Pagos>();

                while (reader.Read())
                {
                    pagoItem = new Pagos();
                    pagoItem.Id = Convert.ToInt32(reader.GetString(0));
                    pagoItem.Total = Convert.ToDecimal(reader.GetString(1));
                    pagoItem.Concepto = reader.GetString(2);
                    pagoItem.Referencia = reader.GetString(3);
                    pagoItem.Fecha = reader.GetString(4);
                    if (reader.GetString(5).Equals("EN_ESPERA"))
                    {
                        pagoItem.Estado = Pagos.EstadoEnum.ENESPERAEnum;
                    }
                    else
                    {
                        if (reader.GetString(5).Equals("ACEPTADO"))
                        {
                            pagoItem.Estado = Pagos.EstadoEnum.ACEPTADOEnum;
                        }
                        else
                        {
                            pagoItem.Estado = Pagos.EstadoEnum.DENEGADODEVOLUCINEnum;
                        }
                    }
                    pagoItem.DetallesEstado = reader.GetString(6);
                    pagoItem.UsuarioEmail = reader.GetString(7);
                    listaPagos.Add(pagoItem);
                }

                if (listaPagos.Count > 0)
                {
                    conn.Close();
                    return StatusCode(200, listaPagos);
                }

                InlineResponse404 resp3 = new InlineResponse404();
                resp3.ErrorMessage = "ERROR_RECURSO_NO_ENCONTRADO";
                conn.Close();
                return StatusCode(404, resp3);
            }
            else
            {
                InlineResponse401 resp2 = new InlineResponse401();
                resp2.ErrorMessage = "ERROR_TOKEN";
                conn.Close();
                return StatusCode(401, resp2);
            }
        }

        /// <summary>
        /// Se hace una nueva transaccion
        /// </summary>
        /// <remarks>Lo que hacemos es realizar una nueva trasacción vinculada al cliente</remarks>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <response code="201">Detalles sobre la transaccion</response>
        /// <response code="400">Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        [HttpPost]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/realizarPago")]
        [ValidateModelState]
        [SwaggerOperation("RealizarPago")]
        [SwaggerResponse(statusCode: 201, type: typeof(Pagos), description: "Detalles sobre la transaccion")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        public virtual IActionResult RealizarPago([FromBody]Pagos body, [FromQuery][Required()]string token)
        {
            string stringConexion = "server=localhost;port=3306;user id=root;password=adelfr.2000;database=iw;SslMode=none";
            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            InlineResponse201 resp = new InlineResponse201();

            if (comprobarToken(token))
            {
                try
                {
                    conn.Close();
                    conn = new MySqlConnection(stringConexion);
                    conn.Open();
                    string id = devolverIDUSER(token);
                    conn.Close();
                    conn = new MySqlConnection(stringConexion);
                    conn.Open();
                    MySqlCommand cmd2 = new MySqlCommand();
                    cmd2.Connection = conn;
                    string estado = GetValue(body.Estado);
                    cmd2.CommandText = "INSERT INTO iw.pagos (total, concepto, referencia, fecha, estado, detallesEstado,fk_user) VALUES ('" +
                        body.Total.ToString() + "', '" + body.Concepto.ToString() + "', '" + body.Referencia.ToString()
                        + "',now()" + ", '" + estado + "','"+body.DetallesEstado.ToString()+ "', '" +  id + "');";
                    cmd2.ExecuteNonQuery();
                    conn.Close();
                    resp.Token = token;
                }
                catch (MySqlException e)
                {
                    InlineResponse400 resp2 = new InlineResponse400();
                    resp2.TypeError = "ERROR_PARAMETERS";
                    resp2.MessageError = "Los parámetros introducidos son erroneos.";
                    conn.Close();
                    Console.WriteLine(e.ToString());
                    return StatusCode(400, resp2);
                }
            }
            else
            {
                InlineResponse400 resp2 = new InlineResponse400();
                resp2.TypeError = "ERROR_PARAMETERS";
                resp2.MessageError = "Los parámetros introducidos son erroneos.";
                conn.Close();
                return StatusCode(400, resp2);
            }

            return StatusCode(201, resp);
        }
    }
}
