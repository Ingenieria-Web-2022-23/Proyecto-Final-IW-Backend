/*
 * TPVV
 *
 * TPVV Ingeniería Web
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lac56@alu.ua.es
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SeguridadApiController : ControllerBase
    { 
        /// <summary>
        /// Se obtiene el token único del usuario
        /// </summary>
        /// <remarks>Para realizar la aplicación tendremos dos tipos de autorización, una apiKey que nos dará la autorización para hacer las peticiones de la API y un AuthToken único para cada uno de los usuarios de nuestro TPVV.</remarks>
        /// <response code="201">Nos devolverá el Token de ese usuario.</response>
        /// <response code="400">Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.</response>
        /// <response code="403">El cliente no posee los permisos necesarios para cierto contenido, por lo que el servidor está rechazando otorgar una respuesta apropiada.</response>
        [HttpGet]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/token")]
        [ValidateModelState]
        [SwaggerOperation("GetToken")]
        [SwaggerResponse(statusCode: 201, type: typeof(InlineResponse201), description: "Nos devolverá el Token de ese usuario.")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.")]
        [SwaggerResponse(statusCode: 403, type: typeof(InlineResponse403), description: "El cliente no posee los permisos necesarios para cierto contenido, por lo que el servidor está rechazando otorgar una respuesta apropiada.")]
        public virtual IActionResult GetToken()
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(InlineResponse201));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(InlineResponse403));
            string exampleJson = null;
            exampleJson = "{\n  \"Token\" : \"jbHBSFBUIAKONaiaoizfcja0f09kasndjan\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse201>(exampleJson)
                        : default(InlineResponse201);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Si el login se completa de forma correcta, se le devolverá al usuario su token.
        /// </summary>
        /// <remarks>Para el inicio de sesión solo necesitaremos nuestro usuario y contraseña. Pero para la realización del resto de trasacciones lo que necesitaremos será un token que va asociado a cada cuenta de usuario y que será único.</remarks>
        /// <param name="body">Credenciales para el inicio de sesión</param>
        /// <response code="201">Nos devolverá el Token de ese usuario.</response>
        /// <response code="400">Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.</response>
        /// <response code="403">El cliente no posee los permisos necesarios para cierto contenido, por lo que el servidor está rechazando otorgar una respuesta apropiada.</response>
        [HttpPost]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/login")]
        [ValidateModelState]
        [SwaggerOperation("Login")]
        [SwaggerResponse(statusCode: 201, type: typeof(InlineResponse201), description: "Nos devolverá el Token de ese usuario.")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.")]
        [SwaggerResponse(statusCode: 403, type: typeof(InlineResponse403), description: "El cliente no posee los permisos necesarios para cierto contenido, por lo que el servidor está rechazando otorgar una respuesta apropiada.")]
        public virtual IActionResult Login([FromBody]Object body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(InlineResponse201));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(InlineResponse403));
            string exampleJson = null;
            exampleJson = "{\n  \"Token\" : \"jbHBSFBUIAKONaiaoizfcja0f09kasndjan\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse201>(exampleJson)
                        : default(InlineResponse201);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Se da de alta a un nuevo usuario en nuestro sistema
        /// </summary>
        /// <remarks>Podremos aregrar nuevos usuario/clientes a nuestro sistema a través de un sencillo formulario de registro.</remarks>
        /// <param name="body"></param>
        /// <response code="201">Registro realizado correctamente</response>
        /// <response code="400">Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.</response>
        [HttpPut]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/registro")]
        [ValidateModelState]
        [SwaggerOperation("Registro")]
        [SwaggerResponse(statusCode: 201, type: typeof(Usuario), description: "Registro realizado correctamente")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.")]
        public virtual IActionResult Registro([FromBody]Registro body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Usuario));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));
            string exampleJson = null;
            exampleJson = "{\n  \"password\" : \"aijsfbhausfbas\",\n  \"tipoUsuario\" : \"normal\",\n  \"id\" : 1,\n  \"nombre\" : \"Luis Alfonso\",\n  \"email\" : \"luis@gmail.com\",\n  \"nombreEmpresa\" : \"A reason\",\n  \"token\" : \"i989nasiudfbas54asd5as4da5s1d\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Usuario>(exampleJson)
                        : default(Usuario);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
