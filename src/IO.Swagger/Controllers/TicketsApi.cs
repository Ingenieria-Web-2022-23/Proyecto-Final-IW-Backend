/*
 * TPVV
 *
 * TPVV Ingeniería Web
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lac56@alu.ua.es
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using MySql.Data.MySqlClient;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TicketsApiController : ControllerBase
    {
        private MySqlConnection conn;
        private string stringConexion = "server=localhost;port=3306;user id=luis;password=root;database=iw;SslMode=none";
        private bool comprobarToken(string token)
        {
            MySqlCommand cmd2 = new MySqlCommand();
            cmd2.Connection = conn;
            cmd2.CommandText = "SELECT * FROM iw.almacentokens where token = '" + token + "'";
            cmd2.ExecuteNonQuery();
            MySqlDataReader readerKey = cmd2.ExecuteReader();
            bool comprobarKey = false;

            while (readerKey.Read())
            {
                if (token == readerKey.GetString(1))
                {
                    comprobarKey = true;
                    break;
                }
            }

            return comprobarKey;
        }

        private string obtenerEmailAdmin()
        {
            string email = "";

            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd4 = new MySqlCommand();
            cmd4.Connection = conn;
            cmd4.CommandText = "SELECT * FROM iw.administradores ORDER BY RAND() LIMIT 1;";
            cmd4.ExecuteNonQuery();

            MySqlDataReader reader = cmd4.ExecuteReader();

            while (reader.Read())
            {
                email = reader.GetString(0);
            }
            return email;
        }


        private int obtenerIDMensaje()
        {
            int id = -1;

            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd4 = new MySqlCommand();
            cmd4.Connection = conn;
            cmd4.CommandText = "select max(id) as id from mensajes;";
            cmd4.ExecuteNonQuery();

            MySqlDataReader reader = cmd4.ExecuteReader();

            while (reader.Read())
            {
                id = Convert.ToInt32(reader.GetString(0));
            }
            return id;
        }

        /// <summary>
        /// Podremos borrar un ticket en especifico
        /// </summary>
        /// <remarks>Podremos borrar un ticket de nuestro sistema para siempre</remarks>
        /// <param name="token"></param>
        /// <param name="idTicket"></param>
        /// <response code="200">Ticket borrado con exito</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        /// <response code="404">No se encontró el recurso que se pidió</response>
        [HttpDelete]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/borrarTicket")]
        [ValidateModelState]
        [SwaggerOperation("BorrarTicket")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se encontró el recurso que se pidió")]
        public virtual IActionResult BorrarTicket([FromQuery][Required()]string token, [FromQuery][Required()]decimal? idTicket)
        {
            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            InlineResponse200 resp = new InlineResponse200();

            if (comprobarToken(token))
            {
                try
                {
                    conn = new MySqlConnection(stringConexion);
                    conn.Open();
                    MySqlCommand cmd2 = new MySqlCommand();
                    cmd2.Connection = conn;
                    cmd2.CommandText = "SELECT * FROM iw.tickets where id = " + idTicket.ToString();
                    cmd2.ExecuteNonQuery();
                    cmd2.Dispose();
                    MySqlDataReader readerUsuario = cmd2.ExecuteReader();
                    bool comprobarTicket = false;

                    while (readerUsuario.Read())
                    {

                        if (idTicket == Convert.ToInt32(readerUsuario.GetString(0)))
                        {
                            comprobarTicket = true;
                            break;
                        }
                    }

                    if (comprobarTicket)
                    {
                        try
                        {
                            conn = new MySqlConnection(stringConexion);
                            conn.Open();
                            MySqlCommand cmd3 = new MySqlCommand();
                            cmd3.Connection = conn;
                            cmd3.CommandText = "DELETE FROM iw.tickets where id = " + idTicket.ToString();
                            cmd3.ExecuteNonQuery();
                            cmd3.Dispose();

                            conn.Close();
                            return StatusCode(200);

                        }
                        catch (MySqlException e)
                        {
                            InlineResponse404 resp2 = new InlineResponse404();
                            resp2.ErrorMessage = "ERROR_RECURSO_NO_ENCONTRADO";
                            conn.Close();
                            return StatusCode(404, resp2);
                        }
                    }
                    else
                    {
                        InlineResponse404 resp2 = new InlineResponse404();
                        resp2.ErrorMessage = "ERROR_RECURSO_NO_ENCONTRADO";
                        conn.Close();
                        return StatusCode(404, resp2);
                    }
                }
                catch (MySqlException e)
                {
                    InlineResponse404 resp2 = new InlineResponse404();
                    resp2.ErrorMessage = "ERROR_RECURSO_NO_ENCONTRADO";
                    conn.Close();
                    return StatusCode(404, resp2);
                }
            }
            else
            {
                InlineResponse401 resp2 = new InlineResponse401();
                resp2.ErrorMessage = "ERROR_TOKEN";
                conn.Close();
                return StatusCode(401, resp2);

            }
        }

        /// <summary>
        /// Crea un nuevo ticket
        /// </summary>
        /// <remarks>Se abrirá un ticket sobre una incidencia relacionada con uno de los pagos realizados</remarks>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <response code="201">Detalles o datos del ticket</response>
        /// <response code="400">Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        [HttpPost]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/crearTicket")]
        [ValidateModelState]
        [SwaggerOperation("CrearTicket")]
        [SwaggerResponse(statusCode: 201, type: typeof(Ticket), description: "Detalles o datos del ticket")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        public virtual IActionResult CrearTicket([FromBody]Ticket body, [FromQuery][Required()]string token)
        {
            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            InlineResponse201 resp = new InlineResponse201();

            if (comprobarToken(token))
            {
                try
                {
                    conn = new MySqlConnection(stringConexion);
                    conn.Open();
                    MySqlCommand cmd2 = new MySqlCommand();
                    cmd2.Connection = conn;
                    string emailAdmin = obtenerEmailAdmin();

                    cmd2.CommandText = "INSERT INTO iw.tickets (referenciaPago, asunto, descripcion, status, valoracion, fk_usuario, fk_administrador) VALUES ('" +
                        body.ReferenciaPago.ToString() + "', '" + body.Asunto.ToString() + "', '" + body.Descripcion.ToString() + "', '" + Ticket.StatusEnum.ABIERTO + "', 0, '" 
                        + body.UsuarioEncoder.ToString() + "', '" + emailAdmin + "')";
                    cmd2.ExecuteNonQuery();
                    conn.Close();

                    Ticket ticket = new Ticket();
                    ticket.ReferenciaPago = body.ReferenciaPago;
                    ticket.Asunto = body.Asunto.ToString();
                    ticket.Descripcion = body.Descripcion.ToString();
                    ticket.Status = Ticket.StatusEnum.ABIERTO;
                    ticket.UsuarioEncoder = body.UsuarioEncoder.ToString();
                    ticket.AdministradorDecoder = emailAdmin;
                    ticket.valoracion = 0;

                    return StatusCode(201, ticket);
                }
                catch (MySqlException e)
                {
                    InlineResponse400 resp2 = new InlineResponse400();
                    resp2.TypeError = "ERROR_PARAMETERS";
                    resp2.MessageError = "Los parámetros introducidos son erroneos.";
                    conn.Close();
                    Console.WriteLine(e.ToString());
                    return StatusCode(400, resp2);
                }
            }
            else
            {
                InlineResponse401 resp2 = new InlineResponse401();
                resp2.ErrorMessage = "ERROR_TOKEN";
                conn.Close();
                return StatusCode(401, resp2);
            }

            return StatusCode(201, resp);
        }

        /// <summary>
        /// Enviar un mensaje nuevo al chat del ticket
        /// </summary>
        /// <remarks>Podremos enviar un nuevo mensaje al chat que tiene vinculado cada ticket, para así mantener una conversación con el administrador encargado de ayudarnos con nuestra incidencia.</remarks>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="idTicket"></param>
        /// <response code="200">Mensaje enviado correctamente</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        /// <response code="404">No se encontró el recurso que se pidió</response>
        [HttpPost]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/chatTicket/enviarMessage")]
        [ValidateModelState]
        [SwaggerOperation("EnviarMensaje")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se encontró el recurso que se pidió")]
        public virtual IActionResult EnviarMensaje([FromBody]Mensaje body, [FromQuery][Required()]string token, [FromQuery][Required()]decimal? idTicket)
        {
            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            InlineResponse201 resp = new InlineResponse201();

            if (comprobarToken(token))
            {
                try
                {
                    conn = new MySqlConnection(stringConexion);
                    conn.Open();
                    MySqlCommand cmd2 = new MySqlCommand();
                    cmd2.Connection = conn;
                    cmd2.CommandText = "INSERT INTO iw.mensajes (contenido, fk_usuario_mensajes) VALUES ('" +
                        body.Contenido.ToString() + "', '" + body.emailUsuario.ToString() + "')";
                    cmd2.ExecuteNonQuery();
                    conn.Close();

                    conn = new MySqlConnection(stringConexion);
                    conn.Open();
                    MySqlCommand cmd3 = new MySqlCommand();
                    cmd3.Connection = conn;
                    int idMensaje = obtenerIDMensaje();
                    cmd3.CommandText = "INSERT INTO iw.mensajes_ticket (fk_mensaje, fk_ticket) VALUES (" + idMensaje.ToString() + ", " + idTicket.ToString() + ")";
                    cmd3.ExecuteNonQuery();
                    
                    conn.Close();
                }
                catch (MySqlException e)
                {
                    InlineResponse404 resp2 = new InlineResponse404();
                    resp2.ErrorMessage = "ERROR_RECURSO_NO_ENCONTRADO";
                    conn.Close();
                    Console.WriteLine(e.ToString());
                    return StatusCode(400, resp2);
                }
            }
            else
            {
                InlineResponse401 resp2 = new InlineResponse401();
                resp2.ErrorMessage = "ERROR_TOKEN";
                conn.Close();
                return StatusCode(401, resp2);
            }

            return StatusCode(202, "Mensaje enviado correctamente");
        }

        /// <summary>
        /// Devolver los mensajes del chat del ticket
        /// </summary>
        /// <remarks>Podremos consultar el intercambio de mensajes que hay vinculados a un ticket, es decir las respuestas tanto del admin como del usuario vinculados a un ticket</remarks>
        /// <param name="token"></param>
        /// <param name="idTicket"></param>
        /// <response code="200">Mensajes dentro de un ticket</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        /// <response code="404">No se encontró el recurso que se pidió</response>
        [HttpGet]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/chatTicket")]
        [ValidateModelState]
        [SwaggerOperation("GetChatTicket")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2003), description: "Mensajes dentro de un ticket")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se encontró el recurso que se pidió")]
        public virtual IActionResult GetChatTicket([FromQuery][Required()]string token, [FromQuery][Required()]decimal? idTicket)
        {
            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            InlineResponse200 resp = new InlineResponse200();

            if (comprobarToken(token))
            {
                conn = new MySqlConnection(stringConexion);
                conn.Open();
                MySqlCommand cmd2 = new MySqlCommand();
                cmd2.Connection = conn;
                cmd2.CommandText = "select id, fecha, contenido, fk_usuario_mensajes from mensajes " +
                    "join mensajes_ticket on mensajes.id = mensajes_ticket.fk_ticket and fk_ticket = " + idTicket.ToString() + ";";
                cmd2.ExecuteNonQuery();

                MySqlDataReader reader = cmd2.ExecuteReader();
                List<Mensaje> listMensaje = new List<Mensaje>();
                while (reader.Read())
                {
                    Mensaje mensaje = new Mensaje();
                    mensaje.Id = Convert.ToInt32(reader.GetString(0));
                    mensaje.Fecha = reader.GetString(1);
                    mensaje.Contenido = reader.GetString(2);
                    mensaje.emailUsuario = reader.GetString(3);

                    listMensaje.Add(mensaje);
                }

                conn.Close();
                return StatusCode(200, listMensaje);
            }
            else
            {
                InlineResponse401 resp2 = new InlineResponse401();
                resp2.ErrorMessage = "ERROR_TOKEN";
                conn.Close();
                return StatusCode(401, resp2);
            }
        }

        /// <summary>
        /// Consultar los detalles de un ticket en concreto
        /// </summary>
        /// <remarks>Podremos consultar los detalles de un ticket, es decir tanto los datos que hemos proporcionado sobre la incidencia como al respuesta proporcionada por el administrador a cargo de ella.</remarks>
        /// <param name="token"></param>
        /// <param name="idTicket"></param>
        /// <response code="200">Detalles o datos del ticket</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        /// <response code="404">No se encontró el recurso que se pidió</response>
        [HttpGet]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/detallesTicket")]
        [ValidateModelState]
        [SwaggerOperation("GetDetallesTicket")]
        [SwaggerResponse(statusCode: 200, type: typeof(Ticket), description: "Detalles o datos del ticket")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se encontró el recurso que se pidió")]
        public virtual IActionResult GetDetallesTicket([FromQuery][Required()]string token, [FromQuery][Required()]decimal? idTicket)
        {
            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            InlineResponse200 resp = new InlineResponse200();

            if (comprobarToken(token))
            {
                conn = new MySqlConnection(stringConexion);
                conn.Open();
                MySqlCommand cmd2 = new MySqlCommand();
                cmd2.Connection = conn;
                cmd2.CommandText = "SELECT * FROM iw.tickets where id = " + idTicket.ToString() + "";
                cmd2.ExecuteNonQuery();

                Ticket ticket = new Ticket();
                MySqlDataReader reader = cmd2.ExecuteReader();

                while (reader.Read())
                {
                    ticket.Id = Convert.ToInt32(reader.GetString(0));
                    ticket.ReferenciaPago = reader.GetString(1);
                    ticket.Asunto = reader.GetString(2);
                    ticket.Descripcion = reader.GetString(3);
                    switch (reader.GetString(4))
                    {
                        case "ABIERTO":
                            ticket.Status = Ticket.StatusEnum.ABIERTO;
                            break;
                        case "CERRADO":
                            ticket.Status = Ticket.StatusEnum.CERRADO;
                            break;
                        case "ESPERA":
                            ticket.Status = Ticket.StatusEnum.ESPERA;
                            break;
                        case "CANCELADO":
                            ticket.Status = Ticket.StatusEnum.CANCELADO;
                            break;
                    }

                    ticket.valoracion = Convert.ToInt32(reader.GetString(5));
                    ticket.UsuarioEncoder = reader.GetString(6);
                    ticket.AdministradorDecoder = reader.GetString(7);

                    conn.Close();
                    return StatusCode(200, ticket);
                }

                InlineResponse404 resp3 = new InlineResponse404();
                resp3.ErrorMessage = "ERROR_RECURSO_NO_ENCONTRADO";
                conn.Close();
                return StatusCode(404, resp3);
            }
            else
            {
                InlineResponse401 resp2 = new InlineResponse401();
                resp2.ErrorMessage = "ERROR_TOKEN";
                conn.Close();
                return StatusCode(401, resp2);
            }
        }

        /// <summary>
        /// Obtiene una lista con todos los tickets que se han creado.
        /// </summary>
        /// <remarks>Se devolverá una lista con todos los tickets</remarks>
        /// <param name="token"></param>
        /// <param name="estadoFiltro"></param>
        /// <response code="200">Lista con todos los tickets</response>
        /// <response code="400">Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        [HttpGet]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/listaTickets")]
        [ValidateModelState]
        [SwaggerOperation("GetListaTickets")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2002), description: "Lista con todos los tickets")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        public virtual IActionResult GetListaTickets([FromQuery][Required()]string token, [FromQuery]string estadoFiltro)
        {
            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            InlineResponse200 resp = new InlineResponse200();

            if (comprobarToken(token))
            {
                conn = new MySqlConnection(stringConexion);
                conn.Open();
                MySqlCommand cmd2 = new MySqlCommand();
                cmd2.Connection = conn;
                cmd2.CommandText = "SELECT * FROM iw.tickets";
                cmd2.ExecuteNonQuery();

                MySqlDataReader reader = cmd2.ExecuteReader();
                List<Ticket> listTickets = new List<Ticket>();
                while (reader.Read())
                {
                    if (reader.GetString(4) != estadoFiltro)
                    {
                        continue;
                    }

                    Ticket ticket = new Ticket();
                    ticket.Id = Convert.ToInt32(reader.GetString(0));
                    ticket.ReferenciaPago = reader.GetString(1);
                    ticket.Asunto = reader.GetString(2);
                    ticket.Descripcion = reader.GetString(3);
                    switch (reader.GetString(4))
                    {
                        case "ABIERTO":
                            ticket.Status = Ticket.StatusEnum.ABIERTO;
                            break;
                        case "CERRADO":
                            ticket.Status = Ticket.StatusEnum.CERRADO;
                            break;
                        case "ESPERA":
                            ticket.Status = Ticket.StatusEnum.ESPERA;
                            break;
                        case "CANCELADO":
                            ticket.Status = Ticket.StatusEnum.CANCELADO;
                            break;
                    }
                    ticket.valoracion = Convert.ToInt32(reader.GetString(5));
                    ticket.UsuarioEncoder = reader.GetString(6);
                    ticket.AdministradorDecoder = reader.GetString(7);

                    listTickets.Add(ticket);
                }

                conn.Close();
                resp.Data = listTickets;
                return StatusCode(200, resp);
            }
            else
            {
                InlineResponse401 resp2 = new InlineResponse401();
                resp2.ErrorMessage = "ERROR_TOKEN";
                conn.Close();
                return StatusCode(401, resp2);
            }
        }

        /// <summary>
        /// El usuario otorga una valoración al ticket abierto
        /// </summary>
        /// <remarks>El usuario que ha abierto el ticket va a tener la posibilidad de asignar una valoración para el ticket que ha abierto anteriormente.</remarks>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="idTicket"></param>
        /// <response code="200">Detalles o datos del ticket</response>
        /// <response code="400">Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        [HttpPost]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/valorarTicket")]
        [ValidateModelState]
        [SwaggerOperation("ValorarTicket")]
        [SwaggerResponse(statusCode: 200, type: typeof(Ticket), description: "Detalles o datos del ticket")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        public virtual IActionResult ValorarTicket([FromBody]Valoracion body, [FromQuery][Required()]string token, [FromQuery][Required()]decimal? idTicket)
        {
            conn = new MySqlConnection(stringConexion);
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            InlineResponse200 resp = new InlineResponse200();

            if (comprobarToken(token))
            {
                try
                {
                    conn = new MySqlConnection(stringConexion);
                    conn.Open();
                    MySqlCommand cmd3 = new MySqlCommand();
                    cmd3.Connection = conn;
                    cmd3.CommandText = "UPDATE iw.tickets SET valoracion=" + body.Numero.ToString() + " where id = " + idTicket.ToString() + ";";
                    cmd3.ExecuteNonQuery();
                    conn.Close();

                    conn.Open();
                    MySqlCommand cmd2 = new MySqlCommand();
                    cmd2.Connection = conn;
                    cmd2.CommandText = "SELECT * FROM iw.tickets where id = " + idTicket.ToString() + "";
                    cmd2.ExecuteNonQuery();

                    Ticket ticket = new Ticket();
                    MySqlDataReader reader = cmd2.ExecuteReader();

                    while (reader.Read())
                    {
                        ticket.Id = Convert.ToInt32(reader.GetString(0));
                        ticket.ReferenciaPago = reader.GetString(1);
                        ticket.Asunto = reader.GetString(2);
                        ticket.Descripcion = reader.GetString(3);
                        switch (reader.GetString(4))
                        {
                            case "ABIERTO":
                                ticket.Status = Ticket.StatusEnum.ABIERTO;
                                break;
                            case "CERRADO":
                                ticket.Status = Ticket.StatusEnum.CERRADO;
                                break;
                            case "ESPERA":
                                ticket.Status = Ticket.StatusEnum.ESPERA;
                                break;
                            case "CANCELADO":
                                ticket.Status = Ticket.StatusEnum.CANCELADO;
                                break;
                        }
                        ticket.valoracion = Convert.ToInt32(reader.GetString(5));
                        ticket.UsuarioEncoder = reader.GetString(6);
                        ticket.AdministradorDecoder = reader.GetString(7);

                        conn.Close();
                        return StatusCode(200, ticket);
                    }

                    InlineResponse400 resp3 = new InlineResponse400();
                    resp3.TypeError = "ERROR_PARAMETERS";
                    resp3.MessageError = "Los parámetros introducidos son erroneos.";
                    conn.Close();
                    return StatusCode(404, resp3);
                }
                catch (MySqlException e)
                {
                    InlineResponse400 resp3 = new InlineResponse400();
                    resp3.TypeError = "ERROR_PARAMETERS";
                    resp3.MessageError = "Los parámetros introducidos son erroneos.";
                    conn.Close();
                    return StatusCode(404, resp3);
                }
            }
            else
            {
                InlineResponse401 resp2 = new InlineResponse401();
                resp2.ErrorMessage = "ERROR_TOKEN";
                conn.Close();
                return StatusCode(401, resp2);
            }
        }
    }
}
