/*
 * TPVV
 *
 * TPVV Ingeniería Web
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lac56@alu.ua.es
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TicketsApiController : ControllerBase
    { 
        /// <summary>
        /// Podremos borrar un ticket en especifico
        /// </summary>
        /// <remarks>Podremos borrar un ticket de nuestro sistema para siempre</remarks>
        /// <param name="token"></param>
        /// <param name="idTicket"></param>
        /// <response code="200">Ticket borrado con exito</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        /// <response code="404">No se encontró el recurso que se pidió</response>
        [HttpDelete]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/borrarTicket")]
        [ValidateModelState]
        [SwaggerOperation("BorrarTicket")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se encontró el recurso que se pidió")]
        public virtual IActionResult BorrarTicket([FromQuery][Required()]string token, [FromQuery][Required()]decimal? idTicket)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(InlineResponse401));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(InlineResponse404));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Crea un nuevo ticket
        /// </summary>
        /// <remarks>Se abrirá un ticket sobre una incidencia relacionada con uno de los pagos realizados</remarks>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <response code="201">Detalles o datos del ticket</response>
        /// <response code="400">Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        [HttpPost]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/crearTicket")]
        [ValidateModelState]
        [SwaggerOperation("CrearTicket")]
        [SwaggerResponse(statusCode: 201, type: typeof(Ticket), description: "Detalles o datos del ticket")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        public virtual IActionResult CrearTicket([FromBody]Ticket body, [FromQuery][Required()]string token)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Ticket));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(InlineResponse401));
            string exampleJson = null;
            exampleJson = "{\n  \"descripcion\" : \"El usuario realizó el pago pero ha habido algún tipo de error con el banco.\",\n  \"administradorDecoder\" : 3,\n  \"referenciaPago\" : 215961312,\n  \"asunto\" : \"Problema con la transacción\",\n  \"id\" : 1231,\n  \"usuarioEncoder\" : 475415,\n  \"status\" : \"ESPERA\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Ticket>(exampleJson)
                        : default(Ticket);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Enviar un mensaje nuevo al chat del ticket
        /// </summary>
        /// <remarks>Podremos enviar un nuevo mensaje al chat que tiene vinculado cada ticket, para así mantener una conversación con el administrador encargado de ayudarnos con nuestra incidencia.</remarks>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="idTicket"></param>
        /// <response code="200">Mensaje enviado correctamente</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        /// <response code="404">No se encontró el recurso que se pidió</response>
        [HttpPost]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/chatTicket/enviarMessage")]
        [ValidateModelState]
        [SwaggerOperation("EnviarMensaje")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se encontró el recurso que se pidió")]
        public virtual IActionResult EnviarMensaje([FromBody]Mensaje body, [FromQuery][Required()]string token, [FromQuery][Required()]decimal? idTicket)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(InlineResponse401));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(InlineResponse404));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Devolver los mensajes del chat del ticket
        /// </summary>
        /// <remarks>Podremos consultar el intercambio de mensajes que hay vinculados a un ticket, es decir las respuestas tanto del admin como del usuario vinculados a un ticket</remarks>
        /// <param name="token"></param>
        /// <param name="idTicket"></param>
        /// <response code="200">Mensajes dentro de un ticket</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        /// <response code="404">No se encontró el recurso que se pidió</response>
        [HttpGet]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/chatTicket")]
        [ValidateModelState]
        [SwaggerOperation("GetChatTicket")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2003), description: "Mensajes dentro de un ticket")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se encontró el recurso que se pidió")]
        public virtual IActionResult GetChatTicket([FromQuery][Required()]string token, [FromQuery][Required()]decimal? idTicket)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2003));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(InlineResponse401));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(InlineResponse404));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"fecha\" : \"2022-12-12 08:16:22\",\n    \"contenido\" : \"Sigue sin poder confirmar el pago desde el banco\",\n    \"idUsuario\" : 156,\n    \"id\" : 51551\n  }, {\n    \"fecha\" : \"2022-12-12 08:16:22\",\n    \"contenido\" : \"Sigue sin poder confirmar el pago desde el banco\",\n    \"idUsuario\" : 156,\n    \"id\" : 51551\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2003>(exampleJson)
                        : default(InlineResponse2003);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Consultar los detalles de un ticket en concreto
        /// </summary>
        /// <remarks>Podremos consultar los detalles de un ticket, es decir tanto los datos que hemos proporcionado sobre la incidencia como al respuesta proporcionada por el administrador a cargo de ella.</remarks>
        /// <param name="token"></param>
        /// <param name="idTicket"></param>
        /// <response code="200">Detalles o datos del ticket</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        /// <response code="404">No se encontró el recurso que se pidió</response>
        [HttpGet]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/detallesTicket")]
        [ValidateModelState]
        [SwaggerOperation("GetDetallesTicket")]
        [SwaggerResponse(statusCode: 200, type: typeof(Ticket), description: "Detalles o datos del ticket")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se encontró el recurso que se pidió")]
        public virtual IActionResult GetDetallesTicket([FromQuery][Required()]string token, [FromQuery][Required()]decimal? idTicket)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Ticket));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(InlineResponse401));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(InlineResponse404));
            string exampleJson = null;
            exampleJson = "{\n  \"descripcion\" : \"El usuario realizó el pago pero ha habido algún tipo de error con el banco.\",\n  \"administradorDecoder\" : 3,\n  \"referenciaPago\" : 215961312,\n  \"asunto\" : \"Problema con la transacción\",\n  \"id\" : 1231,\n  \"usuarioEncoder\" : 475415,\n  \"status\" : \"ESPERA\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Ticket>(exampleJson)
                        : default(Ticket);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Obtiene una lista con todos los tickets que se han creado.
        /// </summary>
        /// <remarks>Se devolverá una lista con todos los tickets</remarks>
        /// <param name="token"></param>
        /// <param name="estadoFiltro"></param>
        /// <response code="200">Lista con todos los tickets</response>
        /// <response code="400">Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        [HttpGet]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/listaTickets")]
        [ValidateModelState]
        [SwaggerOperation("GetListaTickets")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2002), description: "Lista con todos los tickets")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        public virtual IActionResult GetListaTickets([FromQuery][Required()]string token, [FromQuery]string estadoFiltro)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2002));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(InlineResponse401));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"descripcion\" : \"El usuario realizó el pago pero ha habido algún tipo de error con el banco.\",\n    \"administradorDecoder\" : 3,\n    \"referenciaPago\" : 215961312,\n    \"asunto\" : \"Problema con la transacción\",\n    \"id\" : 1231,\n    \"usuarioEncoder\" : 475415,\n    \"status\" : \"ESPERA\"\n  }, {\n    \"descripcion\" : \"El usuario realizó el pago pero ha habido algún tipo de error con el banco.\",\n    \"administradorDecoder\" : 3,\n    \"referenciaPago\" : 215961312,\n    \"asunto\" : \"Problema con la transacción\",\n    \"id\" : 1231,\n    \"usuarioEncoder\" : 475415,\n    \"status\" : \"ESPERA\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2002>(exampleJson)
                        : default(InlineResponse2002);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// El usuario otorga una valoración al ticket abierto
        /// </summary>
        /// <remarks>El usuario que ha abierto el ticket va a tener la posibilidad de asignar una valoración para el ticket que ha abierto anteriormente.</remarks>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="idTicket"></param>
        /// <response code="200">Detalles o datos del ticket</response>
        /// <response code="400">Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.</response>
        /// <response code="401">Sin autorización para realizar esta operación</response>
        [HttpPost]
        [Route("/lac56-alu/TPVV/1.0.0/tpvv/valorarTicket")]
        [ValidateModelState]
        [SwaggerOperation("ValorarTicket")]
        [SwaggerResponse(statusCode: 200, type: typeof(Ticket), description: "Detalles o datos del ticket")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "Esta respuesta significa que el servidor no pudo interpretar la solicitud dada una sintaxis inválida.")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Sin autorización para realizar esta operación")]
        public virtual IActionResult ValorarTicket([FromBody]Valoracion body, [FromQuery][Required()]string token, [FromQuery][Required()]decimal? idTicket)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Ticket));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(InlineResponse401));
            string exampleJson = null;
            exampleJson = "{\n  \"descripcion\" : \"El usuario realizó el pago pero ha habido algún tipo de error con el banco.\",\n  \"administradorDecoder\" : 3,\n  \"referenciaPago\" : 215961312,\n  \"asunto\" : \"Problema con la transacción\",\n  \"id\" : 1231,\n  \"usuarioEncoder\" : 475415,\n  \"status\" : \"ESPERA\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Ticket>(exampleJson)
                        : default(Ticket);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
