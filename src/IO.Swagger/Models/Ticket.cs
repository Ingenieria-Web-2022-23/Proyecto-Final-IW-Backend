/*
 * TPVV
 *
 * TPVV Ingeniería Web
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lac56@alu.ua.es
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Ticket : IEquatable<Ticket>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// ID del usuario que abrió el ticket
        /// </summary>
        /// <value>ID del usuario que abrió el ticket</value>

        [DataMember(Name="usuarioEncoder")]
        public string? UsuarioEncoder { get; set; }

        /// <summary>
        /// ID Administrador que contesta el ticket
        /// </summary>
        /// <value>ID Administrador que contesta el ticket</value>

        [DataMember(Name="administradorDecoder")]
        public string? AdministradorDecoder { get; set; }

        /// <summary>
        /// ID de la transacción a la que va vinculada el ticket
        /// </summary>
        /// <value>ID de la transacción a la que va vinculada el ticket</value>
        [Required]

        [DataMember(Name="referenciaPago")]
        public string? ReferenciaPago { get; set; }

        /// <summary>
        /// Asunto sobre el que trata la incidencia
        /// </summary>
        /// <value>Asunto sobre el que trata la incidencia</value>
        [Required]

        [DataMember(Name="asunto")]
        public string Asunto { get; set; }

        /// <summary>
        /// Descripción y explicación de la incidencia por la que se ha abierto el ticket
        /// </summary>
        /// <value>Descripción y explicación de la incidencia por la que se ha abierto el ticket</value>
        [Required]

        [DataMember(Name="descripcion")]
        public string Descripcion { get; set; }

        /// <summary>
        /// Estado del ticket
        /// </summary>
        /// <value>Estado del ticket</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ABIERTOEnum for ABIERTO
            /// </summary>
            [EnumMember(Value = "ABIERTO")]
            ABIERTO = 0,
            /// <summary>
            /// Enum CERRADOEnum for CERRADO
            /// </summary>
            [EnumMember(Value = "CERRADO")]
            CERRADO = 1,
            /// <summary>
            /// Enum ESPERAEnum for ESPERA
            /// </summary>
            [EnumMember(Value = "ESPERA")]
            ESPERA = 2,
            /// <summary>
            /// Enum CANCELADOEnum for CANCELADO
            /// </summary>
            [EnumMember(Value = "CANCELADO")]
            CANCELADO = 3        }

        /// <summary>
        /// Estado del ticket
        /// </summary>
        /// <value>Estado del ticket</value>

        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ticket {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UsuarioEncoder: ").Append(UsuarioEncoder).Append("\n");
            sb.Append("  AdministradorDecoder: ").Append(AdministradorDecoder).Append("\n");
            sb.Append("  ReferenciaPago: ").Append(ReferenciaPago).Append("\n");
            sb.Append("  Asunto: ").Append(Asunto).Append("\n");
            sb.Append("  Descripcion: ").Append(Descripcion).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Ticket)obj);
        }

        /// <summary>
        /// Returns true if Ticket instances are equal
        /// </summary>
        /// <param name="other">Instance of Ticket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ticket other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UsuarioEncoder == other.UsuarioEncoder ||
                    UsuarioEncoder != null &&
                    UsuarioEncoder.Equals(other.UsuarioEncoder)
                ) && 
                (
                    AdministradorDecoder == other.AdministradorDecoder ||
                    AdministradorDecoder != null &&
                    AdministradorDecoder.Equals(other.AdministradorDecoder)
                ) && 
                (
                    ReferenciaPago == other.ReferenciaPago ||
                    ReferenciaPago != null &&
                    ReferenciaPago.Equals(other.ReferenciaPago)
                ) && 
                (
                    Asunto == other.Asunto ||
                    Asunto != null &&
                    Asunto.Equals(other.Asunto)
                ) && 
                (
                    Descripcion == other.Descripcion ||
                    Descripcion != null &&
                    Descripcion.Equals(other.Descripcion)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UsuarioEncoder != null)
                    hashCode = hashCode * 59 + UsuarioEncoder.GetHashCode();
                    if (AdministradorDecoder != null)
                    hashCode = hashCode * 59 + AdministradorDecoder.GetHashCode();
                    if (ReferenciaPago != null)
                    hashCode = hashCode * 59 + ReferenciaPago.GetHashCode();
                    if (Asunto != null)
                    hashCode = hashCode * 59 + Asunto.GetHashCode();
                    if (Descripcion != null)
                    hashCode = hashCode * 59 + Descripcion.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Ticket left, Ticket right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Ticket left, Ticket right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
