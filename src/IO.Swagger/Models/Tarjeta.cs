/*
 * TPVV
 *
 * TPVV Ingeniería Web
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lac56@alu.ua.es
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Tarjeta : IEquatable<Tarjeta>
    { 
        /// <summary>
        /// Gets or Sets TitularTarjeta
        /// </summary>

        [DataMember(Name="titularTarjeta")]
        public string TitularTarjeta { get; set; }

        /// <summary>
        /// Número de la tarjeta de crédito
        /// </summary>
        /// <value>Número de la tarjeta de crédito</value>

        [DataMember(Name="numero")]
        public string Numero { get; set; }

        /// <summary>
        /// Código de seguridad
        /// </summary>
        /// <value>Código de seguridad</value>

        [DataMember(Name="ccv")]
        public decimal? Ccv { get; set; }

        /// <summary>
        /// Fecha de caducidad de la tarjeta
        /// </summary>
        /// <value>Fecha de caducidad de la tarjeta</value>

        [DataMember(Name="caducidad")]
        public string Caducidad { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tarjeta {\n");
            sb.Append("  TitularTarjeta: ").Append(TitularTarjeta).Append("\n");
            sb.Append("  Numero: ").Append(Numero).Append("\n");
            sb.Append("  Ccv: ").Append(Ccv).Append("\n");
            sb.Append("  Caducidad: ").Append(Caducidad).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Tarjeta)obj);
        }

        /// <summary>
        /// Returns true if Tarjeta instances are equal
        /// </summary>
        /// <param name="other">Instance of Tarjeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tarjeta other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TitularTarjeta == other.TitularTarjeta ||
                    TitularTarjeta != null &&
                    TitularTarjeta.Equals(other.TitularTarjeta)
                ) && 
                (
                    Numero == other.Numero ||
                    Numero != null &&
                    Numero.Equals(other.Numero)
                ) && 
                (
                    Ccv == other.Ccv ||
                    Ccv != null &&
                    Ccv.Equals(other.Ccv)
                ) && 
                (
                    Caducidad == other.Caducidad ||
                    Caducidad != null &&
                    Caducidad.Equals(other.Caducidad)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TitularTarjeta != null)
                    hashCode = hashCode * 59 + TitularTarjeta.GetHashCode();
                    if (Numero != null)
                    hashCode = hashCode * 59 + Numero.GetHashCode();
                    if (Ccv != null)
                    hashCode = hashCode * 59 + Ccv.GetHashCode();
                    if (Caducidad != null)
                    hashCode = hashCode * 59 + Caducidad.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Tarjeta left, Tarjeta right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Tarjeta left, Tarjeta right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
